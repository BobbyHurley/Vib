/* 
 *  Sample
 *
 *  Sample is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY ); without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 **********************************************************************************
 *  WARNING: THIS CODE WAS GENERATED DO NOT MODIFY, CHANGE THE XSD INSTEAD
 *  Generated by schema2code on ¸ñ 3 7 16:27:55 2019.
 **********************************************************************************
 *  Copyright 2010
 *
 */

#ifndef __SAMPLE_H__
#define __SAMPLE_H__

#include <QObject>
#include <QString>
#include <QDateTime>

class XmlStreamReader;

namespace HT {

//-----------------------------------------------------------
//! \brief       Class definition of Sample
//!
//! 
//!
class Sample : public QObject { 
    Q_OBJECT

public:
    //! constructor
    //!
    Sample();
    //! constructor for parser function
    //!
    Sample(XmlStreamReader&, QString CloseTag ="Sample");
    //! copy constructor
    //!
    Sample(const Sample&);
    //! = operator
    //!
    Sample & operator=(const Sample& val);
    //! == operator
    //!
    bool operator==(const Sample& val);
    //! sets the Title
    //!
    bool setTitle(QString val);

    //! gets the Title
    //!
    //! \return     QString
    //!
    QString getTitle() const;

    //! sets the Desc
    //!
    bool setDesc(QString val);

    //! gets the Desc
    //!
    //! \return     QString
    //!
    QString getDesc() const;

    //! sets the Data
    //!
    bool setData(QString val);

    //! gets the Data
    //!
    //! \return     QString
    //!
    QString getData() const;

    //! sets the MinRepeat
    //!
    bool setMinRepeat(unsigned int val);

    //! gets the MinRepeat
    //!
    //! \return     unsigned int
    //!
    unsigned int getMinRepeat() const;

    //! sets the MaxRepeat
    //!
    bool setMaxRepeat(unsigned int val);

    //! gets the MaxRepeat
    //!
    //! \return     unsigned int
    //!
    unsigned int getMaxRepeat() const;

    //! sets the DefaultRepeat
    //!
    bool setDefaultRepeat(unsigned int val);

    //! gets the DefaultRepeat
    //!
    //! \return     unsigned int
    //!
    unsigned int getDefaultRepeat() const;

    //! generates XML of this object including attributes and child elements
    //! returns QString::null if not all required elements are available
    //! If null returned check lastError() for problem description
    //!
    //! \return     QString
    const QString& toXML(bool outputNamespace = true, QString xmlTag="Sample", bool bWriteTag=true);

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString() const;

    //! generates output of this object including attributes and child elements
    //!
    //! \return     QString
    QString toString(QString lead, QString xmlTag="Sample") const;

    //! return last error found in toXML function
    //!
    //! \return     QString
    const QString& lastError() const;

    //! return changed 
    //!
    //! \return     bool
    const bool& changed() const;

    //! return store 
    //!
    //! \return     QString
    const QString& store() const;


private:
    QString m_title;
    bool m_titlePresent;
    QString m_desc;
    bool m_descPresent;
    QString m_data;
    bool m_dataPresent;
    unsigned int m_minRepeat;
    bool m_minRepeatPresent;
    unsigned int m_maxRepeat;
    bool m_maxRepeatPresent;
    unsigned int m_defaultRepeat;
    bool m_defaultRepeatPresent;

public:

private:
    QString m_lastError; 
    bool m_changed; 
    QString m_store;

public:
    void change(bool bChange) { m_changed =  bChange;}

}; 
} //end ns

#endif
